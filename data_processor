import numpy as np
import pandas as pd
from scipy import signal
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler, MaxAbsScaler
import torch
from torch.utils.data import Dataset
import torch.nn as nn
import warnings

class DataProcessor:
    """
    故障诊断数据处理器 - 简化版
    处理多部件数据的STFT转换和归一化
    """
    
    def __init__(self, scaler_type='robust'):
        """
        初始化数据处理器
        
        参数:
            scaler_type: 'standard', 'minmax', 'robust', 'maxabs', 'none'
        """
        self.scaler_type = scaler_type
        self.scalers = {}  # 每个部件单独保存一个scaler
        
        # 频率映射: 20Hz->0, 40Hz->1, 60Hz->2
        self.freq_mapping = {20: 0, 40: 1, 60: 2}
        
        # 负载映射: 0kN->0, 1kN->1, -1kN->2
        self.load_mapping = {0: 0, 1: 1, -1: 2}
        
        # STFT默认参数
        self.stft_params = {
            'fs': 1000,  # 采样率
            'nperseg': 1024,  # 窗口长度
            'noverlap': 768,  # 重叠点数 (75%重叠)
            'window': 'hann',  # 窗函数
            'detrend': False,  # 是否去趋势
            'return_onesided': True,  # 只返回单边频谱
            'boundary': None,  # 边界扩展
            'padded': True,  # 是否填充
            'axis': -2  # 沿时间轴计算STFT
        }
    
    def get_scaler(self, component_name, n_features):
        """获取指定组件的scaler，如不存在则创建"""
        key = f"{component_name}_{n_features}"
        if key not in self.scalers:
            if self.scaler_type == 'standard':
                self.scalers[key] = StandardScaler()
            elif self.scaler_type == 'minmax':
                self.scalers[key] = MinMaxScaler()
            elif self.scaler_type == 'robust':
                self.scalers[key] = RobustScaler()
            elif self.scaler_type == 'maxabs':
                self.scalers[key] = MaxAbsScaler()
            else:
                self.scalers[key] = None
        return self.scalers[key]
    
    def normalize_signal(self, X, component_name=None, fit=False):
        """
        对信号数据进行归一化/标准化
        
        参数:
            X: 传感器信号数据 [samples, timesteps, features]
            component_name: 组件名称，用于选择对应的scaler
            fit: 是否训练scaler
            
        返回:
            归一化后的数据
        """
        if self.scaler_type == 'none':
            return X
            
        # 如果未提供组件名，使用默认名称
        if component_name is None:
            component_name = 'default'
            
        # 获取特征数量
        n_features = X.shape[-1]
        
        # 重塑为2D以进行缩放
        original_shape = X.shape
        X_reshaped = X.reshape(-1, n_features)
        
        # 获取或创建适当的scaler
        scaler = self.get_scaler(component_name, n_features)
        
        if scaler is None:
            return X
        
        # 训练并应用scaler
        if fit:
            X_normalized = scaler.fit_transform(X_reshaped)
        else:
            X_normalized = scaler.transform(X_reshaped)
            
        # 恢复原始形状
        return X_normalized.reshape(original_shape)
    
    def encode_conditions_batch(self, conditions):
        """
        批量编码工况
        
        参数:
            conditions: NumPy数组，形状为[samples, 2]，包含[频率, 负载]
            
        返回:
            包含所有编码的字典
        """
        result = {
            "freq_id": [],
            "load_id": [],
        }
        
        for i in range(len(conditions)):
            freq = conditions[i, 0]
            load = conditions[i, 1]
            
            # 获取频率ID和负载ID
            freq_id = self.freq_mapping.get(freq, 0)
            load_id = self.load_mapping.get(load, 0)
            
            # 添加到结果
            result["freq_id"].append(freq_id)
            result["load_id"].append(load_id)

        # 转换为numpy数组
        result["freq_id"] = np.array(result["freq_id"])
        result["load_id"] = np.array(result["load_id"])

        return result
    
    # 修改方法：将短信号重复到目标长度
    def repeat_to_target_length(self, signal, target_length):
        """
        通过重复短信号达到目标长度，适用于周期性故障信号
        
        参数:
            signal: 时域信号，形状为 [timesteps, features] 或 [samples, timesteps, features]
            target_length: 目标长度
            
        返回:
            重复后的信号，达到目标长度
        """
        # 判断输入信号维度
        is_batch = len(signal.shape) == 3
        
        if is_batch:
            samples, current_length, n_features = signal.shape
            
            # 如果已经达到目标长度，直接返回
            if current_length >= target_length:
                return signal[:, :target_length, :]
            
            # 计算需要重复的次数
            repeats_needed = int(np.ceil(target_length / current_length))
            print(f"信号长度 {current_length} < 目标长度 {target_length}，将重复 {repeats_needed} 次")
            
            # 为每个样本重复信号
            result = np.zeros((samples, target_length, n_features))
            for i in range(samples):
                # 对信号进行重复
                repeated = np.tile(signal[i], (repeats_needed, 1))
                # 截取到目标长度
                result[i] = repeated[:target_length, :]
                
            return result
        else:
            # 处理单个样本
            current_length, n_features = signal.shape
            
            # 如果已经达到目标长度，直接返回
            if current_length >= target_length:
                return signal[:target_length, :]
            
            # 计算需要重复的次数
            repeats_needed = int(np.ceil(target_length / current_length))
            
            # 重复信号
            repeated = np.tile(signal, (repeats_needed, 1))
            # 截取到目标长度
            return repeated[:target_length, :]
    
    # 修改 STFT 方法，增加重复扩展功能
    def apply_stft(self, signal_data, component_name=None, repeat_to=None, **kwargs):
        """
        应用短时傅里叶变换(STFT)将时域信号转换为时频图像，增加重复扩展功能
        
        参数:
            signal_data: 时域信号，形状为 [samples, timesteps, features] 或 [timesteps, features]
            component_name: 组件名称，用于选择合适的归一化器
            repeat_to: 目标长度，如果提供将通过重复扩展信号到此长度
            **kwargs: STFT参数
        
        返回:
            时频图像
        """
        # 合并默认参数和用户参数
        params = self.stft_params.copy()
        params.update(kwargs)
        
        # 如果需要重复扩展信号
        if repeat_to is not None:
            signal_data = self.repeat_to_target_length(signal_data, repeat_to)
            
        # 对信号归一化
        normalized_data = self.normalize_signal(signal_data, component_name, fit=True)
        
        # 检查输入维度
        is_batch = len(signal_data.shape) == 3
        
        if not is_batch:
            # 单个样本，形状 [timesteps, features]
            timesteps, n_features = normalized_data.shape
            stft_results = []
            
            # 对每个特征通道应用STFT
            for i in range(n_features):
                f, t, Zxx = signal.stft(
                    normalized_data[:, i],
                    fs=params['fs'],
                    window=params['window'],
                    nperseg=params['nperseg'],
                    noverlap=params['noverlap'],
                    detrend=params['detrend'],
                    return_onesided=params['return_onesided'],
                    boundary=params['boundary'],
                    padded=params['padded']
                )
                # 保存STFT结果的幅值（取绝对值）
                stft_results.append(np.abs(Zxx))
            
            # 将所有特征的STFT结果堆叠，形状为 [features, freq_bins, time_frames]
            return np.stack(stft_results, axis=0)
        
        else:
            # 批量样本，形状 [samples, timesteps, features]
            samples, timesteps, n_features = normalized_data.shape
            batch_stft_results = []
            
            # 对每个样本处理
            for s in range(samples):
                sample_stft = []
                
                # 对每个特征通道应用STFT
                for i in range(n_features):
                    f, t, Zxx = signal.stft(
                        normalized_data[s, :, i],
                        fs=params['fs'],
                        window=params['window'],
                        nperseg=params['nperseg'],
                        noverlap=params['noverlap'],
                        detrend=params['detrend'],
                        return_onesided=params['return_onesided'],
                        boundary=params['boundary'],
                        padded=params['padded']
                    )
                    # 保存STFT结果的幅值
                    sample_stft.append(np.abs(Zxx))
                
                # 堆叠当前样本的所有特征STFT结果
                batch_stft_results.append(np.stack(sample_stft, axis=0))
            
            # 堆叠所有样本
            return np.stack(batch_stft_results, axis=0)
    
    # 修改处理数据集方法，使用重复扩展参数
    def process_dataset(self, X, conditions, y=None, component_name=None, apply_stft=True, 
                        stft_params=None, repeat_to=None):
        """
        处理数据集，专为处理单一部件设计，支持信号重复扩展
        
        参数:
            X: 传感器信号数据 [samples, timesteps, features]
            conditions: 工况数据 [samples, 2]，每行为[频率, 负载]
            y: 目标标签 [samples]
            component_name: 组件名称，用于选择合适的归一化器
            apply_stft: 是否应用STFT转换
            stft_params: STFT参数
            repeat_to: 目标信号长度，如提供将通过重复扩展信号
        
        返回:
            如果apply_stft=True：
                stft_images: STFT时频图像
                encoded_conditions: 编码后的工况数据
                y: 标签
        """
        # 编码工况数据
        condition_encoded = self.encode_conditions_batch(conditions)
        
        # 检查是否应用STFT
        if apply_stft:
            # 使用STFT转换时域数据为时频图像
            params = stft_params or {}
            stft_images = self.apply_stft(X, component_name=component_name, 
                                         repeat_to=repeat_to, **params)
            return stft_images, condition_encoded, y
        
        # 如果需要重复扩展但不应用STFT
        if repeat_to is not None:
            X = self.repeat_to_target_length(X, repeat_to)
        
        # 如果不应用STFT，直接返回归一化后的数据
        normalized_data = self.normalize_signal(X, component_name=component_name, fit=True)
        return normalized_data, condition_encoded, y

    def get_subset_data(self, segments_data, conditions_data, labels_data, indices):
        """
        提取指定索引的样本数据
        
        参数:
            segments_data: 分段后的信号数据或STFT转换后的时频图像数据
            conditions_data: 工况数据字典
            labels_data: 标签数据
            indices: 要提取的索引
        """
        if isinstance(segments_data, list):
            subset_segments = [segments_data[i] for i in indices]
        else:
            subset_segments = segments_data[indices]
            
        subset_conditions = {
            "freq_id": conditions_data["freq_id"][indices],
            "load_id": conditions_data["load_id"][indices],
        }
        
        subset_labels = np.array(labels_data)[indices]
        return subset_segments, subset_conditions, subset_labels


class MultiComponentDataset(Dataset):
    """多部件故障诊断数据集，每个部件的数据单独处理"""
    
    def __init__(self, data_list, conditions, labels=None, transform=None, is_stft=True):
        """初始化多部件数据集
        
        参数:
            data_list: 列表，包含多个部件数据数组
            conditions: 编码后的工况数据
            labels: 故障类型标签
            transform: 数据增强变换（可以是单个变换或多个变换的列表）
            is_stft: 数据是否为STFT时频图像
        """
        self.data_list = data_list
        self.conditions = conditions
        self.labels = labels
        
        # 处理transform，如果是单个变换，复制成列表
        if transform is not None and not isinstance(transform, list):
            self.transform = [transform] * len(data_list)
        else:
            self.transform = transform
            
        self.is_stft = is_stft
        
        # 确保数据长度一致
        self.length = len(data_list[0])
        for i, data in enumerate(data_list):
            assert len(data) == self.length, f"部件{i}的数据长度与部件0不一致"
        
        assert len(conditions['freq_id']) == self.length, "工况数据与信号数据长度不一致"
        if labels is not None:
            assert len(labels) == self.length, "标签数据与信号数据长度不一致"
    
    def __len__(self):
        return self.length
    
    def __getitem__(self, idx):
        """获取单个样本的所有部件数据"""
        # 获取所有部件的数据
        component_tensors = []
        
        for i, component_data in enumerate(self.data_list):
            # 获取当前部件的样本
            sample = component_data[idx]
            
            # 应用对应部件的变换
            if self.transform is not None and i < len(self.transform) and self.transform[i] is not None:
                sample = self.transform[i](sample)
                
            # 转换为张量
            sample_tensor = torch.FloatTensor(sample)
            component_tensors.append(sample_tensor)
            
        # 获取工况数据
        freq_id = torch.LongTensor([self.conditions['freq_id'][idx]])
        load_id = torch.LongTensor([self.conditions['load_id'][idx]])
        
        # 获取标签
        if self.labels is not None:
            label = torch.LongTensor([self.labels[idx]])
            return component_tensors, freq_id, load_id, label
        
        return component_tensors, freq_id, load_id, label

    def forward(self, x_list, freq_id=None, load_id=None):
        """
        前向传播
        
        参数:
            x_list: 列表，包含每个部件的输入数据
            freq_id: 频率ID (0, 1, 或 2)
            load_id: 负载ID (0, 1, 或 2)
            
        返回:
            输出: 分类预测结果
        """
        # 确保输入的部件数量与分支数量一致
        assert len(x_list) == self.num_components, f"Expected {self.num_components} components, got {len(x_list)}"
        
        # 从每个部件提取特征
        features = []
        for i, x in enumerate(x_list):
            feat = self.component_branches[i](x)
            # 平坦化特征
            if len(feat.shape) > 2:
                feat = feat.view(feat.size(0), -1)
            features.append(feat)
        
        # 拼接所有部件的特征
        combined_features = torch.cat(features, dim=1)
        
        # 融合特征和工况信息
        if self.working_condition and freq_id is not None and load_id is not None:
            freq_embed = self.freq_embedding(freq_id.squeeze())
            load_embed = self.load_embedding(load_id.squeeze())
            
            # 拼接工况嵌入
            condition_embedding = torch.cat([freq_embed, load_embed], dim=1)
            
            # 拼接特征和工况
            combined = torch.cat([combined_features, condition_embedding], dim=1)
        else:
            combined = combined_features
        
        # 通过融合层
        output = self.fusion(combined)
        
        return output
