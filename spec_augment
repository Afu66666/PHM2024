import numpy as np
import random

def time_mask(spec, T=5, num_masks=1, replace_with_zero=True):
    """
    应用时间掩码
    
    参数:
        spec: 时频图像，形状为 [channels, freq_bins, time_frames]
        T: 最大掩码时间长度
        num_masks: 掩码数量
        replace_with_zero: 是否用零替换（否则用均值）
    
    返回:
        掩码后的图像
    """
    cloned = spec.copy()
    channels, freq_bins, time_frames = cloned.shape
    
    for c in range(channels):
        for i in range(num_masks):
            t = np.random.randint(0, T)
            t0 = np.random.randint(0, time_frames - t)
            
            if replace_with_zero:
                cloned[c, :, t0:t0+t] = 0
            else:
                cloned[c, :, t0:t0+t] = cloned[c, :, :].mean()
    return cloned

def freq_mask(spec, F=5, num_masks=1, replace_with_zero=True):
    """应用频率掩码"""
    cloned = spec.copy()
    channels, freq_bins, time_frames = cloned.shape
    
    for c in range(channels):
        for i in range(num_masks):
            f = np.random.randint(0, F)
            f0 = np.random.randint(0, freq_bins - f)
            
            if replace_with_zero:
                cloned[c, f0:f0+f, :] = 0
            else:
                cloned[c, f0:f0+f, :] = cloned[c, :, :].mean()
    return cloned

def spec_augment(spec, time_warping=False, time_mask_param=10, 
                frequency_mask_param=10, n_time_masks=2, n_freq_masks=2):
    """应用SpecAugment数据增强"""
    
    # 应用频率掩码
    augmented_spec = freq_mask(spec, F=frequency_mask_param, num_masks=n_freq_masks)
    
    # 应用时间掩码
    augmented_spec = time_mask(augmented_spec, T=time_mask_param, num_masks=n_time_masks)
    
    return augmented_spec

def diagonal_mask(spec, max_width=10, num_masks=1, replace_with_zero=True):
    """
    应用对角线掩码
    
    参数:
        spec: 时频图像，形状为 [channels, freq_bins, time_frames]
        max_width: 最大掩码宽度
        num_masks: 掩码数量
        replace_with_zero: 是否用零替换
    
    返回:
        掩码后的图像
    """
    cloned = spec.copy()
    channels, freq_bins, time_frames = cloned.shape
    
    for c in range(channels):
        for i in range(num_masks):
            # 随机选择对角线方向 (正或负)
            direction = 1 if np.random.random() > 0.5 else -1
            
            # 确定对角线宽度
            width = np.random.randint(1, max_width)
            
            # 随机选择起始点
            start_freq = np.random.randint(0, freq_bins)
            start_time = np.random.randint(0, time_frames)
            
            # 创建掩码
            for offset in range(min(freq_bins, time_frames)):
                f_idx = start_freq + offset
                t_idx = start_time + direction * offset
                
                # 检查索引是否在范围内
                if 0 <= f_idx < freq_bins and 0 <= t_idx < time_frames:
                    # 应用宽度
                    for w in range(-width//2, width//2 + 1):
                        f = f_idx + w
                        if 0 <= f < freq_bins:
                            if replace_with_zero:
                                cloned[c, f, t_idx] = 0
                            else:
                                cloned[c, f, t_idx] = cloned[c].mean()
    
    return cloned

def random_erasing(spec, erase_ratio=0.05, num_blocks=2):
    """
    随机擦除块
    
    参数:
        spec: 时频图像，形状为 [channels, freq_bins, time_frames]
        erase_ratio: 擦除区域占总区域的比例
        num_blocks: 要擦除的块数
    
    返回:
        擦除后的图像
    """
    cloned = spec.copy()
    channels, freq_bins, time_frames = cloned.shape
    
    area = freq_bins * time_frames
    target_area = area * erase_ratio / num_blocks
    
    for c in range(channels):
        for _ in range(num_blocks):
            # 计算擦除块的尺寸
            aspect_ratio = np.random.uniform(0.3, 1.0/0.3)
            h = int(np.sqrt(target_area * aspect_ratio))
            w = int(np.sqrt(target_area / aspect_ratio))
            
            # 确保尺寸在合理范围内
            h = min(h, freq_bins)
            w = min(w, time_frames)
            
            # 随机选择左上角
            f0 = np.random.randint(0, freq_bins - h + 1)
            t0 = np.random.randint(0, time_frames - w + 1)
            
            # 擦除区块
            cloned[c, f0:f0+h, t0:t0+w] = 0
    
    return cloned

def augment_dataset_with_strategies(components_data, labels, component_names, samples_per_class=3):
    """
    使用多种增强策略增强数据集
    
    参数:
        components_data: 列表，包含每个部件的数据，形状为 [samples, channels, freq_bins, time_frames]
        labels: 标签数组
        component_names: 组件名称列表
        samples_per_class: 每个类别增加的样本数量
    
    返回:
        augmented_components, augmented_labels
    """
    # 转换为NumPy数组以便处理
    if isinstance(labels, list):
        labels = np.array(labels)
        
    original_len = len(labels)
    num_components = len(components_data)
    
    # 获取每个类别的索引
    unique_classes = np.unique(labels)
    class_indices = {cls: np.where(labels == cls)[0] for cls in unique_classes}
    
    # 创建增强数据列表
    augmented_components = [comp.copy() for comp in components_data]
    augmented_labels = labels.copy()
    
    print(f"开始SpecAugment数据增强，每个类别将增加 {samples_per_class} 个样本")
    print(f"原始样本数: {len(labels)}")
    
    # 增强策略列表
    augmentation_methods = [
        # 基本SpecAugment
        lambda x: spec_augment(x, time_mask_param=max(5, int(x.shape[2] * 0.1)), 
                              frequency_mask_param=max(5, int(x.shape[1] * 0.1)),
                              n_time_masks=2, n_freq_masks=2),
        
        # 更强的时间掩码
        lambda x: spec_augment(x, time_mask_param=max(10, int(x.shape[2] * 0.2)), 
                              frequency_mask_param=max(5, int(x.shape[1] * 0.1)),
                              n_time_masks=3, n_freq_masks=1),
        
        # 更强的频率掩码
        lambda x: spec_augment(x, time_mask_param=max(5, int(x.shape[2] * 0.1)), 
                              frequency_mask_param=max(10, int(x.shape[1] * 0.2)),
                              n_time_masks=1, n_freq_masks=3),
        
        # 对角线掩码
        lambda x: diagonal_mask(x, max_width=6, num_masks=2),
        
        # 随机擦除
        lambda x: random_erasing(x, erase_ratio=0.07, num_blocks=3)
    ]
    
    # 对每个类别应用增强
    for cls in unique_classes:
        cls_indices = class_indices[cls]
        if len(cls_indices) == 0:
            continue
        
        # 为每个类别创建新样本
        for i in range(samples_per_class):
            # 随机选择一个样本
            idx = np.random.choice(cls_indices)
            
            # 随机选择一种增强方法
            aug_method = np.random.choice(augmentation_methods)
            
            # 对每个部件应用所选的增强
            new_component_samples = []
            for comp_idx in range(num_components):
                sample = components_data[comp_idx][idx].copy()
                augmented = aug_method(sample)
                new_component_samples.append(augmented)
            
            # 添加增强后的样本
            for comp_idx in range(num_components):
                augmented_components[comp_idx] = np.vstack([
                    augmented_components[comp_idx], 
                    new_component_samples[comp_idx][np.newaxis, :]
                ])
            augmented_labels = np.append(augmented_labels, cls)
    
    new_len = len(augmented_labels)
    added_samples = new_len - original_len
    print(f"增强完成，从 {original_len} 增加到 {new_len} 样本 (增加了 {added_samples} 样本)")
    
    return augmented_components, augmented_labels
