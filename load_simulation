import numpy as np
import torch
def simulate_different_loads(signal, original_load=-1, target_load=None):
    is_batch = len(signal.shape) == 3
    
    if target_load is None:
        target_load = np.random.choice([0, 1])
    
    if is_batch:
        samples, timesteps, features = signal.shape
        result = np.zeros_like(signal, dtype=np.float64)
        
        for i in range(samples):
            if target_load == 0:  # 模拟0kN
                amplitude_factor = 1.0 - 0.15 * np.random.rand()
                result[i] = signal[i] * amplitude_factor
                
                if timesteps > 1000:
                    for j in range(features):
                        fft = np.fft.rfft(signal[i, :, j])
                        
                        freq_bins = fft.shape[0]
                        freq_factors = np.linspace(1.0, 0.7, freq_bins)
                        freq_factors = freq_factors * (0.9 + 0.2 * np.random.rand(freq_bins))
                        
                        phases = np.exp(1j * np.random.normal(0, 0.2, fft.shape))
                        
                        fft_shifted = fft * freq_factors * phases
                        
                        result[i, :, j] = np.fft.irfft(fft_shifted, timesteps)
                    
            elif target_load == 1:  # 模拟1kN
                amplitude_factor = 1.0 + 0.25 * np.random.rand()
                result[i] = signal[i] * amplitude_factor
                
                if timesteps > 1000:
                    for j in range(features):
                        fft = np.fft.rfft(signal[i, :, j])
                        
                        freq_bins = fft.shape[0]
                        mid_point = freq_bins // 2
                        freq_factors = np.ones(freq_bins)
                        freq_factors[mid_point-mid_point//2:mid_point+mid_point//2] = 1.3
                        freq_factors = freq_factors * (0.9 + 0.2 * np.random.rand(freq_bins))
                        
                        phases = np.exp(1j * np.random.normal(0, 0.3, fft.shape))
                        
                        fft_shifted = fft * freq_factors * phases
                        
                        result[i, :, j] = np.fft.irfft(fft_shifted, timesteps)
    else:
        timesteps, features = signal.shape
        result = np.zeros_like(signal, dtype=np.float64)
        
        if target_load == 0:
            amplitude_factor = 1.0 - 0.15 * np.random.rand()
            result = signal * amplitude_factor
            
            for j in range(features):
                fft = np.fft.rfft(signal[:, j])
                freq_bins = fft.shape[0]
                freq_factors = np.linspace(1.0, 0.7, freq_bins)
                freq_factors = freq_factors * (0.9 + 0.2 * np.random.rand(freq_bins))
                phases = np.exp(1j * np.random.normal(0, 0.2, fft.shape))
                fft_shifted = fft * freq_factors * phases
                result[:, j] = np.fft.irfft(fft_shifted, timesteps)
                
        elif target_load == 1:
            amplitude_factor = 1.0 + 0.25 * np.random.rand()
            result = signal * amplitude_factor
            
            for j in range(features):
                fft = np.fft.rfft(signal[:, j])
                freq_bins = fft.shape[0]
                mid_point = freq_bins // 2
                freq_factors = np.ones(freq_bins)
                freq_factors[mid_point-mid_point//2:mid_point+mid_point//2] = 1.3
                freq_factors = freq_factors * (0.9 + 0.2 * np.random.rand(freq_bins))
                phases = np.exp(1j * np.random.normal(0, 0.3, fft.shape))
                fft_shifted = fft * freq_factors * phases
                result[:, j] = np.fft.irfft(fft_shifted, timesteps)
    
    return result

def augment_with_load_simulation(component_data_list, conditions, labels, num_augmented=2, batch_size=4):
    if isinstance(labels, torch.Tensor):
        labels = labels.numpy()
    
    if isinstance(conditions, torch.Tensor):
        conditions = conditions.numpy()
    
    conditions = conditions.copy()
    
    original_samples = len(labels)
    
    augmented_components = {}
    for component, data in component_data_list.items():
        augmented_components[component] = data.copy()
    
    augmented_conditions = conditions.copy()
    augmented_labels = labels.copy()
    
    print(f"原始样本数: {original_samples}")
    print(f"开始负载模拟数据增强，每个样本将生成 {num_augmented} 个增强版本...")
    
    for target_load in [0, 1]:
        print(f"处理负载 {target_load}kN...")
        
        samples_per_load = num_augmented // 2
        
        for sample_idx in range(samples_per_load):
            for batch_start in range(0, original_samples, batch_size):
                batch_end = min(batch_start + batch_size, original_samples)
                batch_size_actual = batch_end - batch_start
                
                new_components = {}
                for component, data in component_data_list.items():
                    batch_samples = data[batch_start:batch_end]
                    
                    augmented_samples = simulate_different_loads(
                        batch_samples,
                        original_load=-1,
                        target_load=target_load
                    )
                    
                    new_components[component] = augmented_samples
                
                new_conditions = conditions[batch_start:batch_end].copy()
                new_conditions[:, 1] = target_load
                
                new_labels = labels[batch_start:batch_end].copy()
                
                for component, data in new_components.items():
                    augmented_components[component] = np.concatenate(
                        [augmented_components[component], data], axis=0
                    )
                
                augmented_conditions = np.concatenate([augmented_conditions, new_conditions], axis=0)
                augmented_labels = np.concatenate([augmented_labels, new_labels], axis=0)
    
    print(f"增强后样本总数: {len(augmented_labels)}")
    print(f"原始负载分布: {np.unique(conditions[:, 1], return_counts=True)}")
    print(f"增强后负载分布: {np.unique(augmented_conditions[:, 1], return_counts=True)}")
    
    return augmented_components, augmented_conditions, augmented_labels
